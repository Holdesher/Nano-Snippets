{
	//! JavaScript

	"âœ…Snippet: Debugger": {
		"prefix": "debugger",
		"body": ["debugger; // TODO: debugger", "$0"],
		"description": "âœ…Snippet: Debugger - for the snippet to work correctly, you need to use the extension - 'Todo Tree'"
	},
	"âœ…Snippet: JavaScript Swiper": {
		"prefix": "js-swiper",
		"body": [
			"const ${1:nameSlider}Swiper = new Swiper(\".${1:nameSlider}Swiper\", {",
			"\tnavigation: {",
			"\t\tnextEl: \".${1:nameSlider}Swiper .swiper-controls .swiper-button-next\",",
			"\t\tprevEl: \".${1:nameSlider}Swiper .swiper-controls .swiper-button-prev\",",
			"\t},",
			"\tpagination: {",
			"\t\tel: \".${1:nameSlider}Swiper .swiper-controls .swiper-pagination\",",
			"\t},",
			"});",
			"$0"
		],
		"description": "âœ…Snippet: JavaScript Swiper"
	},
	"âœ…Snippet: console.log": {
		"prefix": "log",
		"body": ["console.log('${1:element}    ', ${1:element})", "$0"],
		"description": "âœ…Snippet: console.log"
	},
	"âœ…Snippet: setTimeout": {
		"prefix": "settime",
		"body": ["setTimeout(() => {", "\t${1:code}", "}, ${2:timeout});", "$0"],
		"description": "âœ…Snippet: setTimeout"
	},
	"âœ…Snippet: Try Catch": {
		"prefix": "try",
		"body": ["try {", "\t${1:code}", "} catch (e) {", "\tconsole.error('Error', e)", "}", "$0"],
		"description": "âœ…Snippet: Try Catch"
	},

	//! React

	"âœ…Snippet: Functional component": {
		"prefix": "fc",
		"body": [
			"import React from 'react'",
			"",
			"export const ${1:${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/$1/}} = ({ children }) => {",
			"\treturn <>{children}</>",
			"}",
			"$0"
		],
		"description": "âœ…Snippet: Functional Component"
	},
	"âœ…Snippet: Memo Functional Component": {
		"prefix": "mfc",
		"body": [
			"import React from 'react'",
			"",
			"const _${1:${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/$1/}} = ({ data }) => {",
			"\treturn <>{data}</>",
			"}",
			"",
			"export const ${1:${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/$1/}} = React.memo(_${1:${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/$1/}})",
			"$0"
		],
		"description": "âœ…Snippet: Memo Functional Component"
	},
	"âœ…Snippet: Memo TypeScript Functional Component": {
		"prefix": "mtfc",
		"body": [
			"import React from 'react'",
			"",
			"export type T${1:${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/$1/}}Props = {",
			"\tdata: string;",
			"}",
			"",
			"const _${1:${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/$1/}} = ({ data }: I${1:${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/$1/}}Props) => {",
			"\treturn <>{data}</>",
			"}",
			"",
			"export const ${1:${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/$1/}} = React.memo(_${1:${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/$1/}})",
			"$0"
		],
		"description": "âœ…Snippet: Memo TypeScript Functional Component"
	},
	"âœ…Snippet: TypeScript Functional Component": {
		"prefix": "tfc",
		"body": [
			"import React from 'react'",
			"",
			"export type T${1:${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/$1/}}Props = {",
			"\tchildren: React.ReactNode;",
			"}",
			"",
			"export const ${1:${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/$1/}} = ({ children }: T${1:${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/$1/}}Props) => {",
			"\treturn <>{children}</>",
			"}",
			"$0"
		],
		"description": "âœ…Snippet: TypeScript Functional Component"
	},
	"âœ…Snippet: React Hook useCallback - memosations of function": {
		"prefix": "useCallback",
		"body": ["useCallback(() => ${1:code}, [${2:dependencies}])", "$0"],
		"description": "âœ…Snippet: React Hook useCallback - memosations of function"
	},
	"âœ…Snippet: React Hook useEffect": {
		"prefix": "useEffect",
		"body": ["useEffect(() => {", "\t${1:code}", "}, [${2:dependencies}]);", "$0"],
		"description": "âœ…Snippet: React Hook useEffect"
	},
	"âœ…Snippet: React Hook useId": {
		"prefix": "useId",
		"body": ["const id${1:Name} = useId()", "$0"],
		"description": "âœ…Snippet: React Hook useId"
	},
	"âœ…Snippet: React Hook useImperativeHandle": {
		"prefix": "useImperativeHandle",
		"body": ["useImperativeHandle(${1:ref}, () => ({", "\t${2:code}", "}));", "$0"],
		"description": "âœ…Snippet: React Hook useImperativeHandle"
	},
	"âœ…Snippet: React Hook useLayoutEffect": {
		"prefix": "useLayoutEffect",
		"body": ["useLayoutEffect(() => {", "\t${1:code}", "}, [${2:dependencies}]);", "$0"],
		"description": "âœ…Snippet: React Hook useLayoutEffect"
	},
	"âœ…Snippet: useEffect -> console.log": {
		"prefix": "uselog",
		"body": [
			"useEffect(() => {",
			"\tconsole.log('${1:element}    ', ${1:element})",
			"}, [${1:element}])",
			"$0"
		],
		"description": "âœ…Snippet: useEffect -> console.log"
	},
	"âœ…Snippet: React Hook useMemo - memosations of meaning": {
		"prefix": "useMemo",
		"body": ["useMemo(() => ${1:code}, [${2:dependencies}])", "$0"],
		"description": "âœ…Snippet: React Hook useMemo - memosations of meaning"
	},
	"âœ…Snippet: React Hook useRef": {
		"prefix": "useRef",
		"body": ["const ref${1:Name} = useRef(null)", "$0"],
		"description": "âœ…Snippet: React Hook useRef"
	},
	"âœ…Snippet: React Hook useState": {
		"prefix": "useState",
		"body": ["const [${1:value}, set${2:change}] = useState(null);", "$0"],
		"description": "âœ…Snippet: React Hook useState"
	},

	//! Style (CSS)

	"âœ…Snippet: Style After": {
		"prefix": "style-after",
		"body": [
			":after {",
			"\tcontent: '';",
			"\tposition: absolute;",
			"\ttop: ${1:top};",
			"\tleft: ${2:left};",
			"\t$0",
			"}",
			""
		],
		"description": "âœ…Snippet: Style After"
	},
	"âœ…Snippet: Style Base": {
		"prefix": "style-base",
		"body": [
			"*,",
			"*::before,",
			"*::after {",
			"\tbox-sizing: border-box;",
			"\tpadding: 0;",
			"\tmargin: 0;",
			"\tuser-select: text;",
			"\toutline:none;",
			"}",
			"",
			"body {",
			"\twidth: 100%;",
			"\tfont-family: Roboto;",
			"\tfont-size: 16px;",
			"}",
			"",
			"a {",
			"\ttext-decoration: none;",
			"}",
			"",
			"ul {",
			"\tlist-style: none;",
			"}",
			"",
			"input, textarea {",
			"\toutline:none;",
			"\t-webkit-appearance: none;",
			"\t-webkit-border-radius: 0;",
			"}",
			"",
			"input:focus, textarea:focus {",
			"\toutline:none;",
			"}",
			"",
			"input {",
			"\tpadding: 0;",
			"\tmargin: 0;",
			"\tborder: none;",
			"\toutline: none;",
			"}",
			"",
			"textarea {",
			"\tresize: none;",
			"}",
			"",
			"button {",
			"\tpadding: 0;",
			"\tborder: none;",
			"\tcursor: pointer;",
			"\toutline: none;",
			"}",
			"",
			"ol,",
			"ul {",
			"\tpadding-left: 0;",
			"}",
			"",
			"dl,",
			"ol,",
			"ul {",
			"\tmargin-top: 0;",
			"\tmargin-bottom: 0;",
			"}",
			"",
			"p {",
			"\tmargin-top: 0;",
			"\tmargin-bottom: 0;",
			"}",
			"",
			".h1,",
			".h2,",
			".h3,",
			".h4,",
			".h5,",
			".h6,",
			"h1,",
			"h2,",
			"h3,",
			"h4,",
			"h5,",
			"h6 {",
			"\tmargin-top: 0;",
			"\tmargin-bottom: 0;",
			"}",
			"",
			".containers {",
			"\tmax-width: 1440px;",
			"\tpadding: 0 165px;",
			"\tmargin: 0 auto;",
			"\twidth: 100%;",
			"}",
			"",
			".display-n {",
			"\tdisplay: none !important;",
			"}",
			"",
			"opacity-h {",
			"\topacity: 0 !important;",
			"}",
			"",
			"$0"
		],
		"description": "âœ…Snippet: Style Base"
	},
	"âœ…Snippet: Style Before": {
		"prefix": "style-before",
		"body": [
			":before {",
			"\tcontent: '';",
			"\tposition: absolute;",
			"\ttop: ${1:top};",
			"\tleft: ${2:left};",
			"\t$0",
			"}",
			""
		],
		"description": "âœ…Snippet: Style Before"
	},
	"âœ…Snippet: Style Flex Scheme": {
		"prefix": "style-flex",
		"body": [
			"display: flex;",
			"flex-direction: ${1:row};",
			"align-items: ${2:flex-start};",
			"justify-content: ${3:flex-start};",
			"gap: ${4:0px};",
			"flex-wrap: ${5:no-wrap};",
			"$0"
		],
		"description": "âœ…Snippet: Style Flex Scheme"
	},
	"âœ…Snippet: Style Text Limit": {
		"prefix": "style-tl",
		"body": [
			"overflow: hidden;",
			"text-overflow: ellipsis;",
			"display: -webkit-box;",
			"-webkit-line-clamp: ${1:limit number};",
			"-webkit-box-orient: vertical;",
			"$0"
		],
		"description": "âœ…Snippet: Style Text Limit"
	},
	"âœ…Snippet: Style Transition": {
		"prefix": "style-trans",
		"body": ["transition: all ${1:time}s ${2:ease};", "$0"],
		"description": "âœ…Snippet: Style Transition"
	},
	"âœ…Snippet: Style Transparent Text": {
		"prefix": "style-tt",
		"body": [
			"-webkit-text-fill-color: transparent;",
			"-webkit-text-stroke: ${1:size}px ${2:color};",
			"$0"
		],
		"description": "âœ…Snippet: Style Transparent Text"
	},
	"âœ…Snippet: Style Text Wrap": {
		"prefix": "style-tw",
		"body": [
			"overflow-wrap: break-word;",
			"word-wrap: break-word;",
			"-webkit-hyphens: auto;",
			"-ms-hyphens: auto;",
			"-moz-hyphens: auto;",
			"hyphens: auto;",
			"$0"
		],
		"description": "âœ…Snippet: Style Text Wrap"
	},

	//! TypeScript

	"âœ…Snippet: TypeScript Enum": {
		"prefix": "enum",
		"body": ["export enum E${1:Name} {", "    ${2:code}", "}", "$0"],
		"description": "âœ…Snippet: TypeScript Enum"
	},
	"âœ…Snippet: TypeScript Interface ": {
		"prefix": "interface",
		"body": ["export interface I${1:Name} {", "    ${2:code}", "}", "$0"],
		"description": "âœ…Snippet: TypeScript Interface "
	},
	"âœ…Snippet: TypeScript Type": {
		"prefix": "type",
		"body": ["export type T${1:Name} = {", "    ${2:code}", "}", "$0"],
		"description": "âœ…Snippet: TypeScript Type"
	},

	//! Jquery

	"âœ…Snippet: Jquery Add Class": {
		"prefix": "jq-add",
		"body": ["$('${1:name}').addClass('${2:class}');", "$0"],
		"description": "âœ…Snippet: Jquery Add Class"
	},
	"âœ…Snippet: Jquery On": {
		"prefix": "jq-on",
		"body": ["$('${1:name}').on('${2:params}', function (e) {", "     ${3:code}", "});", "$0"],
		"description": "âœ…Snippet: Jquery On"
	},
	"âœ…Snippet: Jquery Ready": {
		"prefix": "jq-ready",
		"body": ["$(document).ready(function () {", "\t${1:code}", "});", "$0"],
		"description": "âœ…Snippet: Jquery Ready"
	},
	"âœ…Snippet: Jquery Remove Class": {
		"prefix": "jq-remove",
		"body": ["$('${1:name}').removeClass('${2:class}');", "$0"],
		"description": "âœ…Snippet: Jquery Remove Class"
	}
}

//| ðŸ”¥ by kah3vich ðŸ”¥
